
Atmega328P_blink.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000108  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000000b4  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000108  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000138  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000020  00000000  00000000  00000178  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000006ff  00000000  00000000  00000198  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000667  00000000  00000000  00000897  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000027f  00000000  00000000  00000efe  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000024  00000000  00000000  00001180  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000037e  00000000  00000000  000011a4  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000010  00000000  00000000  00001522  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   8:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  10:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  14:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  18:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  20:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  2c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  30:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  34:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  38:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  3c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  40:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  44:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  48:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  50:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  54:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  58:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  5c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  60:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  64:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 40 00 	call	0x80	; 0x80 <main>
  78:	0c 94 58 00 	jmp	0xb0	; 0xb0 <_exit>

0000007c <__bad_interrupt>:
  7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000080 <main>:
#include <util/delay.h>


int main(void)
{
	MCUSR = (1<<EXTRF);
  80:	82 e0       	ldi	r24, 0x02	; 2
  82:	84 bf       	out	0x34, r24	; 52
	/* Replace with your application code */
    DDRC |= (1 << PINC5);	// set as output
  84:	3d 9a       	sbi	0x07, 5	; 7
	DDRC |= (1 << PINC6);	// set as output
  86:	3e 9a       	sbi	0x07, 6	; 7
	PORTC &= ~(1 << PINC6); // set LOW, LED OFF
  88:	46 98       	cbi	0x08, 6	; 8
	PORTC |= (1 << PINC5);  // set HIGH, LED ON
  8a:	45 9a       	sbi	0x08, 5	; 8
	
	while (1) 
    {
		PORTC ^= (1 << PINC6);
  8c:	20 e4       	ldi	r18, 0x40	; 64
		PORTC ^= (1 << PINC5);
  8e:	90 e2       	ldi	r25, 0x20	; 32
	PORTC &= ~(1 << PINC6); // set LOW, LED OFF
	PORTC |= (1 << PINC5);  // set HIGH, LED ON
	
	while (1) 
    {
		PORTC ^= (1 << PINC6);
  90:	88 b1       	in	r24, 0x08	; 8
  92:	82 27       	eor	r24, r18
  94:	88 b9       	out	0x08, r24	; 8
		PORTC ^= (1 << PINC5);
  96:	88 b1       	in	r24, 0x08	; 8
  98:	89 27       	eor	r24, r25
  9a:	88 b9       	out	0x08, r24	; 8
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  9c:	3f e9       	ldi	r19, 0x9F	; 159
  9e:	46 e8       	ldi	r20, 0x86	; 134
  a0:	81 e0       	ldi	r24, 0x01	; 1
  a2:	31 50       	subi	r19, 0x01	; 1
  a4:	40 40       	sbci	r20, 0x00	; 0
  a6:	80 40       	sbci	r24, 0x00	; 0
  a8:	e1 f7       	brne	.-8      	; 0xa2 <main+0x22>
  aa:	00 c0       	rjmp	.+0      	; 0xac <main+0x2c>
  ac:	00 00       	nop
  ae:	f0 cf       	rjmp	.-32     	; 0x90 <main+0x10>

000000b0 <_exit>:
  b0:	f8 94       	cli

000000b2 <__stop_program>:
  b2:	ff cf       	rjmp	.-2      	; 0xb2 <__stop_program>
